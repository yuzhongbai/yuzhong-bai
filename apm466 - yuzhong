#Q2 A

list_1 = [100.07,100.06,100.06,100.05,100.04,100.04,100.03,100.03,100.02,100.02]
list_2 = [99.8,99.79,99.78,99.77,99.76,99.72,99.7,99.7,99.72,99.74]
list_3 = [99.31,99.26,99.29,99.28,99.26,99.18,99.12,99.1,99.15,99.2]
list_4 = [98.808,98.8,98.781,98.763,98.736,98.61,98.553,98.549,98.558,98.611]
list_5 = [99.2,99.2,99.16,99.13,99.09,98.92,98.84,98.84,98.83,98.9]
list_6 = [100.56,100.63,100.62,100.58,100.52,100.29,100.21,100.15,100.17,100.27]
list_7 = [99.64,99.67,99.61,99.59,99.49,99.25,99.12,99.11,99.1,99.26]
list_8 = [96.66,96.72,96.77,96.77,96.68,96.43,96.26,96.15,96.19,96.31]
list_9 = [95.11,95.17,95.12,95.14,95.04,94.75,94.53,94.5,94.52,94.7]
list_10 = [97.66,97.7,97.67,97.695,97.585,97.24,97.02,96.96,97,97.225]
## selected 10 bonds

list_dirty_1 = [] ## get 10 empty list
list_dirty_2 = []
list_dirty_3 = []
list_dirty_4 = []
list_dirty_5 = []
list_dirty_6 = []
list_dirty_7 = []
list_dirty_8 = []
list_dirty_9 = []
list_dirty_10 = []

for x in range(1,11): #calculate dirty price of 10 bonds then put it into the lists
    dirty1 = float(list_1[x-1]) + 100*0.015*(162+x)/365
    list_dirty_1 += [dirty1]
    dirty2 = float(list_2[x-1]) + 100*0.0025*(162+x)/365
    list_dirty_2 += [dirty2]
    dirty3 = float(list_3[x-1]) + 100*0.0025*(162+x)/365
    list_dirty_3 += [dirty3]
    dirty4 = float(list_4[x-1]) + 100*0.0025*(162+x)/365
    list_dirty_4 += [dirty4]
    dirty5 = float(list_5[x-1]) + 100*0.0075*(162+x)/365
    list_dirty_5 += [dirty5]
    dirty6 = float(list_6[x-1]) + 100*0.015*(131+x)/365
    list_dirty_6 += [dirty6]
    dirty7 = float(list_7[x-1]) + 100*0.0125*(131+x)/365
    list_dirty_7 += [dirty7]
    dirty8 = float(list_8[x-1]) + 100*0.005*(131+x)/365
    list_dirty_8 += [dirty8]
    dirty9 = float(list_9[x-1]) + 100*0.0025*(131+x)/365
    list_dirty_9 += [dirty9]
    dirty10 = float(list_10[x-1]) + 100*0.01*(131+x)/365
    list_dirty_10 += [dirty10]
    
    
import numpy as np
import pandas as pd
from scipy.misc import derivative # to solve for the derivatives automatically

def newton(f, x_0, a, b): ##calculate YTM by using newton raphson method
    df = pd.DataFrame(columns=["iteration","x_value","function_value"])

    xn = x_0

    for n in range(0, b):
        fxn = f(xn)
        df.loc[len(df)] = [n,xn, fxn]
        if abs(fxn) < a:
            print(f"Found a solution after {n} iteration.")
            return xn
        Dfxn = derivative(f, xn, dx=1e-10)
        if Dfxn == 0:
            print("No solution.")
            return None
        xn = xn - fxn/Dfxn
    print("Exceeded maximum iterations. No solution found.")
    return None

ytm1 = []  ## get 10 empty lists
ytm2 = []
ytm3 = []
ytm4 = []
ytm5 = []
ytm6 = []
ytm7 = []
ytm8 = []
ytm9 = []
ytm10 = []

for i in range(0,10):  ##calculate YTM for all 10 bonds and put it into the lists
    y1 = float(list_dirty_1[i])
    ytm1 += [newton(lambda x:(0.75 * ((1-1/(1+x))/x)) + (100 * 1/(1+x) - y1), 0.0001, 1e-10, 10000)]

for i in range(0,10):
    y2 = float(list_dirty_2[i])
    ytm2 += [newton(lambda x:(0.125 * ((1-1/(1+x)**2)/x)) + (100 * 1/(1+x)**2 - y2), 0.0001, 1e-10, 10000)]
    
for i in range(0,10):
    y3 = float(list_dirty_3[i])
    ytm3 += [newton(lambda x:(0.125 * ((1-1/(1+x)**3)/x)) + (100 * 1/(1+x)**3 - y3), 0.0001, 1e-10, 10000)]
    
for i in range(0,10):
    y4 = float(list_dirty_4[i])
    ytm4 += [newton(lambda x:(0.125 * ((1-1/(1+x)**4)/x)) + (100 * 1/(1+x)**4 - y4), 0.0001, 1e-10, 10000)]
    
for i in range(0,10):
    y5 = float(list_dirty_5[i])
    ytm5 += [newton(lambda x:(0.375 * ((1-1/(1+x)**5)/x)) + (100 * 1/(1+x)**5 - y5), 0.0001, 1e-10, 10000)]
    
for i in range(0,10):
    y6 = float(list_dirty_6[i])
    ytm6 += [newton(lambda x:(0.75 * ((1-1/(1+x)**6)/x)) + (100 * 1/(1+x)**6 - y6), 0.0001, 1e-10, 10000)]
    
for i in range(0,10):
    y7 = float(list_dirty_7[i])
    ytm7 += [newton(lambda x:(0.625 * ((1-1/(1+x)**7)/x)) + (100 * 1/(1+x)**7 - y7), 0.0001, 1e-10, 10000)]

for i in range(0,10):
    y8 = float(list_dirty_8[i])
    ytm8 += [newton(lambda x:(0.25 * ((1-1/(1+x)**8)/x)) + (100 * 1/(1+x)**8 - y8), 0.0001, 1e-10, 10000)]
    
for i in range(0,10):
    y9 = float(list_dirty_9[i])
    ytm9 += [newton(lambda x:(0.125 * ((1-1/(1+x)**9)/x)) + (100 * 1/(1+x)**9 - y9), 0.0001, 1e-10, 10000)]
    
for i in range(0,10):
    y10 = float(list_dirty_10[i])
    ytm10 += [newton(lambda x:(0.5 * ((1-1/(1+x)**10)/x)) + (100 * 1/(1+x)**10 - y10), 0.0001, 1e-10, 10000)]


j10 = []  ## 10 empty lists
j11 = []
j12 = []
j13 = []
j14 = []
j17 = []
j18 = []
j19 = []
j20 = []
j21 = []

for i in range(0,1):  ##put all ytm into the 10 lists by date
    j10 += [ytm1[i]]
    j10 += [ytm2[i]]
    j10 += [ytm3[i]]
    j10 += [ytm4[i]]
    j10 += [ytm5[i]]
    j10 += [ytm6[i]]
    j10 += [ytm7[i]]
    j10 += [ytm8[i]]
    j10 += [ytm9[i]]
    j10 += [ytm10[i]]

for i in range(1,2):
    j11 += [ytm1[i]]
    j11 += [ytm2[i]]
    j11 += [ytm3[i]]
    j11 += [ytm4[i]]
    j11 += [ytm5[i]]
    j11 += [ytm6[i]]
    j11 += [ytm7[i]]
    j11 += [ytm8[i]]
    j11 += [ytm9[i]]
    j11 += [ytm10[i]]
    
for i in range(2,3):
    j12 += [ytm1[i]]
    j12 += [ytm2[i]]
    j12 += [ytm3[i]]
    j12 += [ytm4[i]]
    j12 += [ytm5[i]]
    j12 += [ytm6[i]]
    j12 += [ytm7[i]]
    j12 += [ytm8[i]]
    j12 += [ytm9[i]]
    j12 += [ytm10[i]]
    
for i in range(3,4):
    j13 += [ytm1[i]]
    j13 += [ytm2[i]]
    j13 += [ytm3[i]]
    j13 += [ytm4[i]]
    j13 += [ytm5[i]]
    j13 += [ytm6[i]]
    j13 += [ytm7[i]]
    j13 += [ytm8[i]]
    j13 += [ytm9[i]]
    j13 += [ytm10[i]]
    
for i in range(4,5):
    j14 += [ytm1[i]]
    j14 += [ytm2[i]]
    j14 += [ytm3[i]]
    j14 += [ytm4[i]]
    j14 += [ytm5[i]]
    j14 += [ytm6[i]]
    j14 += [ytm7[i]]
    j14 += [ytm8[i]]
    j14 += [ytm9[i]]
    j14 += [ytm10[i]]
    
for i in range(5,6):
    j17 += [ytm1[i]]
    j17 += [ytm2[i]]
    j17 += [ytm3[i]]
    j17 += [ytm4[i]]
    j17 += [ytm5[i]]
    j17 += [ytm6[i]]
    j17 += [ytm7[i]]
    j17 += [ytm8[i]]
    j17 += [ytm9[i]]
    j17 += [ytm10[i]]
    
for i in range(6,7):
    j18 += [ytm1[i]]
    j18 += [ytm2[i]]
    j18 += [ytm3[i]]
    j18 += [ytm4[i]]
    j18 += [ytm5[i]]
    j18 += [ytm6[i]]
    j18 += [ytm7[i]]
    j18 += [ytm8[i]]
    j18 += [ytm9[i]]
    j18 += [ytm10[i]]
    
for i in range(7,8):
    j19 += [ytm1[i]]
    j19 += [ytm2[i]]
    j19 += [ytm3[i]]
    j19 += [ytm4[i]]
    j19 += [ytm5[i]]
    j19 += [ytm6[i]]
    j19 += [ytm7[i]]
    j19 += [ytm8[i]]
    j19 += [ytm9[i]]
    j19 += [ytm10[i]]
    
for i in range(8,9):
    j20 += [ytm1[i]]
    j20 += [ytm2[i]]
    j20 += [ytm3[i]]
    j20 += [ytm4[i]]
    j20 += [ytm5[i]]
    j20 += [ytm6[i]]
    j20 += [ytm7[i]]
    j20 += [ytm8[i]]
    j20 += [ytm9[i]]
    j20 += [ytm10[i]]
    
for i in range(9,10):
    j21 += [ytm1[i]]
    j21 += [ytm2[i]]
    j21 += [ytm3[i]]
    j21 += [ytm4[i]]
    j21 += [ytm5[i]]
    j21 += [ytm6[i]]
    j21 += [ytm7[i]]
    j21 += [ytm8[i]]
    j21 += [ytm9[i]]
    j21 += [ytm10[i]]
    
import matplotlib.pyplot as ytm

x1 = j10  ##plot the graph
x2 = j11
x3 = j12
x4 = j13
x5 = j14
x6 = j17
x7 = j18
x8 = j19
x9 = j20
x10 = j21
y = [1,2,3,4,5,6,7,8,9,10]
ytm.subplot(1,3,1)
ytm.plot(y,x1,label='jan10')
ytm.plot(y,x2,label='jan11')
ytm.plot(y,x3,label='jan12')
ytm.plot(y,x4,label='jan13')
ytm.plot(y,x5,label='jan14')
ytm.plot(y,x6,label='jan17')
ytm.plot(y,x7,label='jan18')
ytm.plot(y,x8,label='jan19')
ytm.plot(y,x9,label='jan20')
ytm.plot(y,x10,label='jan21')
ytm.xlabel('time to maturity')
ytm.ylabel('rate')
ytm.title('5-year yield curve of 10 selected bonds')
ytm.show()
ytm.legend()

#B

import math as m
#creating empty lists
r1 = []
r2 = []
r3 = []
r4 = []
r5 = []
r6 = []
r7 = []
r8 = []
r9 = []
r10 = []
#finding the spot rates using the formula on slides for 10 bonds.
for i in range(0,10):
    r1 += [-(m.log(list_dirty_1[i]/100.75)/0.5)]
    
for i in range(0,10):
    r2 += [-m.log((list_dirty_2[i] - 0.125*m.exp(-(r1[i]*0.5)))/100.125)]
    
for i in range(0,10):
    r3 += [-m.log((list_dirty_3[i] - 0.125*m.exp(-(r1[i]*0.5)) - 0.125*m.exp(-r2[i]*1))/100.125)/1.5]

for i in range(0,10):
    r4 += [-m.log((list_dirty_4[i] - 0.125*m.exp(-(r1[i]*0.5)) - 0.125*m.exp(-r2[i]*1.5) - 0.125*m.exp(-r3[i]*1.55))/100.125)/2]

for i in range(0,10):
    r5 += [-m.log((list_dirty_5[i] - 0.375*m.exp(-(r1[i]*0.5)) - 0.375*m.exp(-r2[i]*1.5) - 0.375*m.exp(-r3[i]*2) - 0.375*m.exp(-r4[i]*2.05))/100.375)/2.5]

for i in range(0,10):
    r6 += [-m.log((list_dirty_6[i] - 0.75*m.exp(-(r1[i]*0.5)) - 0.75*m.exp(-r2[i]*1.5) - 0.75*m.exp(-r3[i]*2) - 0.75*m.exp(-r4[i]*2.5) - 0.75*m.exp(-r5[i]*2.64))/100.75)/3]

for i in range(0,10):
    r7 += [-m.log((list_dirty_7[i] - 0.625*m.exp(-(r1[i]*0.5)) - 0.625*m.exp(-r2[i]*1.5) - 0.625*m.exp(-r3[i]*2) - 0.625*m.exp(-r4[i]*2.5) - 0.625*m.exp(-r5[i]*3) - 0.625*m.exp(-r6[i]*3))/100.625)/3.5]
    
for i in range(0,10):
    r8 += [-m.log((list_dirty_8[i] - 0.25*m.exp(-(r1[i]*0.5)) - 0.25*m.exp(-r2[i]*1.5) - 0.25*m.exp(-r3[i]*2) - 0.25*m.exp(-r4[i]*2.5) - 0.25*m.exp(-r5[i]*3) - 0.25*m.exp(-r6[i]*3.14) - 0.25*m.exp(r7[i]*3.5))/100.25)/4]

for i in range(0,10):
    r9 += [-m.log((list_dirty_9[i] - 0.125*m.exp(-(r1[i]*0.5)) - 0.125*m.exp(-r2[i]*1.5) - 0.125*m.exp(-r3[i]*2) - 0.125*m.exp(-r4[i]*2.5) - 0.125*m.exp(-r5[i]*3) - 0.125*m.exp(-r6[i]*3.14) - 0.125*m.exp(-r7[i]*3.5) - 0.125*m.exp(-r8[i]*4))/100.125)/4.5]
    
for i in range(0,10):
    r10 += [-m.log((list_dirty_10[i] - 0.5*m.exp(-(r1[i]*0.5)) - 0.5*m.exp(-r2[i]*1.5) - 0.5*m.exp(-r3[i]*2) - 0.5*m.exp(-r4[i]*2.5) - 0.5*m.exp(-r5[i]*3) - 0.5*m.exp(-r6[i]*3.14) - 0.5*m.exp(-r7[i]*3.5) - 0.5*m.exp(-r8[i]*4) - 0.5*m.exp(-r9[i]*4.5))/100.5)/5]
# Converting list with 10 different date's spot rates for one bond into the list of 10 bonds' spot rates for one day   
new_r1 = [] ## get 110 empty lists
new_r2 = []
new_r3 = []
new_r4 = []
new_r5 = []
new_r6 = []
new_r7 = []
new_r8 = []
new_r9 = []
new_r10 = []

for i in range(0,1):  
    new_r1 += [r1[i]]
    new_r1 += [r2[i]]
    new_r1 += [r3[i]]
    new_r1 += [r4[i]]
    new_r1 += [r5[i]]
    new_r1 += [r6[i]]
    new_r1 += [r7[i]]
    new_r1 += [r8[i]]
    new_r1 += [r9[i]]
    new_r1 += [r10[i]]

for i in range(1,2):
    new_r2 += [r1[i]]
    new_r2 += [r2[i]]
    new_r2 += [r3[i]]
    new_r2 += [r4[i]]
    new_r2 += [r5[i]]
    new_r2 += [r6[i]]
    new_r2 += [r7[i]]
    new_r2 += [r8[i]]
    new_r2 += [r9[i]]
    new_r2 += [r10[i]]
    
for i in range(2,3):
    new_r3 += [r1[i]]
    new_r3 += [r2[i]]
    new_r3 += [r3[i]]
    new_r3 += [r4[i]]
    new_r3 += [r5[i]]
    new_r3 += [r6[i]]
    new_r3 += [r7[i]]
    new_r3 += [r8[i]]
    new_r3 += [r9[i]]
    new_r3 += [r10[i]]
    
    
for i in range(3,4):
    new_r4 += [r1[i]]
    new_r4 += [r2[i]]
    new_r4 += [r3[i]]
    new_r4 += [r4[i]]
    new_r4 += [r5[i]]
    new_r4 += [r6[i]]
    new_r4 += [r7[i]]
    new_r4 += [r8[i]]
    new_r4 += [r9[i]]
    new_r4 += [r10[i]]
    
for i in range(4,5):
    new_r5 += [r1[i]]
    new_r5 += [r2[i]]
    new_r5 += [r3[i]]
    new_r5 += [r4[i]]
    new_r5 += [r5[i]]
    new_r5 += [r6[i]]
    new_r5 += [r7[i]]
    new_r5 += [r8[i]]
    new_r5 += [r9[i]]
    new_r5 += [r10[i]]
    
for i in range(5,6):
    new_r6 += [r1[i]]
    new_r6 += [r2[i]]
    new_r6 += [r3[i]]
    new_r6 += [r4[i]]
    new_r6 += [r5[i]]
    new_r6 += [r6[i]]
    new_r6 += [r7[i]]
    new_r6 += [r8[i]]
    new_r6 += [r9[i]]
    new_r6 += [r10[i]]
    
for i in range(6,7):
    new_r7 += [r1[i]]
    new_r7 += [r2[i]]
    new_r7 += [r3[i]]
    new_r7 += [r4[i]]
    new_r7 += [r5[i]]
    new_r7 += [r6[i]]
    new_r7 += [r7[i]]
    new_r7 += [r8[i]]
    new_r7 += [r9[i]]
    new_r7 += [r10[i]]
    
for i in range(7,8):
    new_r8 += [r1[i]]
    new_r8 += [r2[i]]
    new_r8 += [r3[i]]
    new_r8 += [r4[i]]
    new_r8 += [r5[i]]
    new_r8 += [r6[i]]
    new_r8 += [r7[i]]
    new_r8 += [r8[i]]
    new_r8 += [r9[i]]
    new_r8 += [r10[i]]
    
for i in range(8,9):
    new_r9 += [r1[i]]
    new_r9 += [r2[i]]
    new_r9 += [r3[i]]
    new_r9 += [r4[i]]
    new_r9 += [r5[i]]
    new_r9 += [r6[i]]
    new_r9 += [r7[i]]
    new_r9 += [r8[i]]
    new_r9 += [r9[i]]
    new_r9 += [r10[i]]
    
for i in range(9,10):
    new_r10 += [r1[i]]
    new_r10 += [r2[i]]
    new_r10 += [r3[i]]
    new_r10 += [r4[i]]
    new_r10 += [r5[i]]
    new_r10 += [r6[i]]
    new_r10 += [r7[i]]
    new_r10 += [r8[i]]
    new_r10 += [r9[i]]
    new_r10 += [r10[i]]


import matplotlib.pyplot as ab
#plot the spot rate curve
y = [1,2,3,4,5,6,7,8,9,10] ## plot
ab.subplot(1,3,2)
ab.plot(y,new_r1,label='jan10')
ab.plot(y,new_r2,label='jan11')
ab.plot(y,new_r3,label='jan12')
ab.plot(y,new_r4,label='jan13')
ab.plot(y,new_r5,label='jan14')
ab.plot(y,new_r6,label='jan17')
ab.plot(y,new_r7,label='jan18')
ab.plot(y,new_r8,label='jan19')
ab.plot(y,new_r9,label='jan20')
ab.plot(y,new_r10,label='jan21')
ab.xlabel('time to maturity')
ab.ylabel('rate')
ab.title('spot rate')
ab.show()
ab.legend()

#C

r11 = [] ## get 4 empty lists
r12 = []
r13 = []
r14 = []
# finding the forward rate using the coversion formula in slide

for i in range(0,10):
    r11 += [(r4[i]*2 - r2[i])]
    r12 += [(r6[i]*3 - r2[i])/2]
    r13 += [(r8[i]*4 - r2[i])/3]
    r14 += [(r10[i]*5 - r2[i])/4]
#Converting list with 10 different date's forward rates for one bond into the list of 10 bonds' forward rates for one day     
new_r11 = []
new_r12 = []
new_r13 = []
new_r14 = []
new_r15 = []
new_r16 = []
new_r17 = []
new_r18 = []
new_r19 = []
new_r110 = []

for i in range(0,1):
    new_r11 += [r11[i]]
    new_r11 += [r12[i]]
    new_r11 += [r13[i]]
    new_r11 += [r14[i]]
    
for i in range(1,2):
    new_r12 += [r11[i]]
    new_r12 += [r12[i]]
    new_r12 += [r13[i]]
    new_r12 += [r14[i]]

for i in range(2,3):
    new_r13 += [r11[i]]
    new_r13 += [r12[i]]
    new_r13 += [r13[i]]
    new_r13 += [r14[i]]

for i in range(3,4):
    new_r14 += [r11[i]]
    new_r14 += [r12[i]]
    new_r14 += [r13[i]]
    new_r14 += [r14[i]]
    
for i in range(4,5):
    new_r15 += [r11[i]]
    new_r15 += [r12[i]]
    new_r15 += [r13[i]]
    new_r15 += [r14[i]]
    
for i in range(5,6):
    new_r16 += [r11[i]]
    new_r16 += [r12[i]]
    new_r16 += [r13[i]]
    new_r16 += [r14[i]]
    
for i in range(6,7):
    new_r17 += [r11[i]]
    new_r17 += [r12[i]]
    new_r17 += [r13[i]]
    new_r17 += [r14[i]]
    
for i in range(7,8):
    new_r18 += [r11[i]]
    new_r18 += [r12[i]]
    new_r18 += [r13[i]]
    new_r18 += [r14[i]]
    
for i in range(8,9):
    new_r19 += [r11[i]]
    new_r19 += [r12[i]]
    new_r19 += [r13[i]]
    new_r19 += [r14[i]]
    
for i in range(9,10):
    new_r110 += [r11[i]]
    new_r110 += [r12[i]]
    new_r110 += [r13[i]]
    new_r110 += [r14[i]]
    
    

import matplotlib.pyplot as a
#plot the forward rate graph
y = [1,2,3,4] ## plot
a.subplot(1,3,3)
a.plot(y,new_r11,label='jan10')
a.plot(y,new_r12,label='jan11')
a.plot(y,new_r13,label='jan12')
a.plot(y,new_r14,label='jan13')
a.plot(y,new_r15,label='jan14')
a.plot(y,new_r16,label='jan17')
a.plot(y,new_r17,label='jan18')
a.plot(y,new_r18,label='jan19')
a.plot(y,new_r19,label='jan20')
a.plot(y,new_r110,label='jan21')
a.xlabel('time to maturity')
a.ylabel('rate')
a.title('forward rate')
a.show()
a.legend()

# 5

yy1 = []
yy2 = []
yy3 = []
yy4 = []
yy5 = []

for i in range(0,9):
    yy1 += [m.log(ytm2[i+1]/ytm2[i])]
    yy2 += [m.log(ytm4[i+1]/ytm4[i])]
    yy3 += [m.log(ytm6[i+1]/ytm6[i])]
    yy4 += [m.log(ytm8[i+1]/ytm8[i])]
    yy5 += [m.log(ytm10[i+1]/ytm10[i])]
    
x11=[]
x22=[]
x33=[]
x44=[]
x55=[]
x66=[]
x77=[]
x88=[]
x99=[]
x00=[]
for i in range(0,1):
    x11 += [yy1[i]]
    x11 += [yy2[i]]
    x11 += [yy3[i]]
    x11 += [yy4[i]]
    x11 += [yy5[i]]
for i in range(1,2):
    x22 += [yy1[i]]
    x22 += [yy2[i]]
    x22 += [yy3[i]]
    x22 += [yy4[i]]
    x22 += [yy5[i]]

for i in range(2,3):
    x33 += [yy1[i]]
    x33 += [yy2[i]]
    x33 += [yy3[i]]
    x33 += [yy4[i]]
    x33 += [yy5[i]]

for i in range(3,4):
    x44 += [yy1[i]]
    x44 += [yy2[i]]
    x44 += [yy3[i]]
    x44 += [yy4[i]]
    x44 += [yy5[i]]
for i in range(4,5):
    x55 += [yy1[i]]
    x55 += [yy2[i]]
    x55 += [yy3[i]]
    x55 += [yy4[i]]
    x55 += [yy5[i]]
for i in range(5,6):
    x66 += [yy1[i]]
    x66 += [yy2[i]]
    x66 += [yy3[i]]
    x66 += [yy4[i]]
    x66 += [yy5[i]]
for i in range(6,7):
    x77 += [yy1[i]]
    x77 += [yy2[i]]
    x77 += [yy3[i]]
    x77 += [yy4[i]]
    x77+=[yy5[i]]
for i in range(7,8):
    x88 += [yy1[i]]
    x88 += [yy2[i]]
    x88 += [yy3[i]]
    x88 += [yy4[i]]
    x88+=[yy5[i]]
for i in range(8,9):
    x99 += [yy1[i]]
    x99 += [yy2[i]]
    x99 += [yy3[i]]
    x99 += [yy4[i]]
    x99+=[yy5[i]]

matrixytm=pd.DataFrame([x11,x22,x33,x44,x55,x66,x77,x88,x99],columns=['1','2','3','4','5'])
cov=pd.DataFrame.cov(matrixytm) 
print(cov)

yyy1 = []
yyy2 = []
yyy3 = []
yyy4 = []

for i in range(0,9):
    yyy1 += [m.log(r11[i+1]/r11[i])]
    yyy2 += [m.log(r12[i+1]/r12[i])]
    yyy3 += [m.log(r13[i+1]/r13[i])]
    yyy4 += [m.log(r14[i+1]/r14[i])]

    
x111=[]
x222=[]
x333=[]
x444=[]
x555=[]
x666=[]
x777=[]
x888=[]
x999=[]
x000=[]
for i in range(0,1):
    x111 += [yyy1[i]]
    x111 += [yyy2[i]]
    x111 += [yyy3[i]]
    x111 += [yyy4[i]]
    
for i in range(1,2):
    x222 += [yyy1[i]]
    x222 += [yyy2[i]]
    x222 += [yyy3[i]]
    x222 += [yyy4[i]]
    

for i in range(2,3):
    x333 += [yyy1[i]]
    x333 += [yyy2[i]]
    x333 += [yyy3[i]]
    

for i in range(3,4):
    x444 += [yyy1[i]]
    x444 += [yyy2[i]]
    x444 += [yyy3[i]]
    x444 += [yyy4[i]]
    
for i in range(4,5):
    x555 += [yyy1[i]]
    x555 += [yyy2[i]]
    x555 += [yyy3[i]]
    x555 += [yyy4[i]]
    
for i in range(5,6):
    x666 += [yyy1[i]]
    x666+= [yyy2[i]]
    x666+= [yyy3[i]]
    x666 += [yyy4[i]]
    
for i in range(6,7):
    x777 += [yyy1[i]]
    x777 += [yyy2[i]]
    x777 += [yyy3[i]]
    x777 += [yyy4[i]]
    
for i in range(7,8):
    x888 += [yyy1[i]]
    x888 += [yyy2[i]]
    x888 += [yyy3[i]]
    x888 += [yyy4[i]]
    
for i in range(8,9):
    x999 += [yyy1[i]]
    x999 += [yyy2[i]]
    x999 += [yyy3[i]]
    x999 += [yyy4[i]]
  

matrixytm1=pd.DataFrame([x111,x222,x333,x444,x555,x666,x777,x888,x999],columns=['1','2','3','4'])
cov1=pd.DataFrame.cov(matrixytm1) 
print(cov1)    

    

    
    
    

    




